.comp 920 0101110100100
.start _nostart_
.depend "_SystemEnum"
.depend "StdEnum"
.depend "StdMisc"
.depend "StdList"
.depend "StdClass"
.depend "StdString"
.depend "_SystemArray"
.depend "StdArray"
.depend "StdChar"
.depend "StdReal"
.depend "StdInt"
.depend "StdOverloaded"
.depend "StdBool"
.depend "rand"
.endinfo
.module m_rand "rand"
.impmod _system
.implab _cycle_in_spine
.implab _type_error
.implab _hnf
.impdesc e_system_dind
.implab e_system_nind e_system_eaind
.impdesc e_system_dif
.implab e_system_nif e_system_eaif
.implab e_system_sif
.impdesc e_system_dAP
.implab e_system_nAP e_system_eaAP
.implab e_system_sAP
.impdesc ARRAY
.impdesc _Nil
.impdesc _Cons
.impdesc _Conss
.implab n_Conss ea_Conss
.impdesc _Consts
.implab n_Consts ea_Consts
.impdesc _Conssts
.implab n_Conssts ea_Conssts
.impdesc _Tuple
.impdesc d_S.1
.implab n_S.1 ea_S.1
.impdesc d_S.2
.implab n_S.2 ea_S.2
.impdesc d_S.3
.implab n_S.3 ea_S.3
.impdesc d_S.4
.implab n_S.4 ea_S.4
.impdesc d_S.5
.implab n_S.5 ea_S.5
.impdesc d_S.6
.implab n_S.6 ea_S.6
.implab _driver
.impmod StdMisc
.implab e_StdMisc_sabort
.impmod StdList
.implab e_StdList_smap
.impmod _SystemArray
.impmod StdReal
.implab e_StdReal_s+;1
.implab e_StdReal_s/;5
.implab e_StdReal_stoReal;13
.impmod StdInt
.implab e_StdInt_sbitor
.implab e_StdInt_sbitand
.implab e_StdInt_sbitxor
.implab e_StdInt_s<<
.implab e_StdInt_s>>
.implab e_StdInt_s+;6
.implab e_StdInt_s-;7
.implab e_StdInt_s*;9
.implab e_StdInt_sone;11
.implab e_StdInt_s==;16
.implab e_StdInt_s<;17
.implab e_StdInt_srem;28
.impmod StdBool
.implab e_StdBool_snot
.export e_rand_sgenRandReal
.export e_rand_eagenRandReal
.descexp e_rand_dgenRandReal e_rand_ngenRandReal e_rand_lgenRandReal 1 0 "genRandReal"
.o 2 0
e_rand_lgenRandReal
	update_a 1 0
	create
	update_a 0 2
	pop_a 1
.d 2 0
	jmp e_rand_eagenRandReal
.n 1 e_rand_dgenRandReal e_rand_eagenRandReal
.o 1 0
e_rand_ngenRandReal
	push_node _cycle_in_spine 1
.o 2 0
e_rand_eagenRandReal
	jsr_eval 0
	pushI_a 0
	pop_a 1
.o 1 1 i
e_rand_sgenRandReal
.o 1 1 i
s1
	create
	push_b 0
	updatepop_b 0 1
.d 1 1 i
	jsr s2
.o 1 0
	buildh d8 0
.d 3 0
	jmp e_StdList_smap
.desc d8 _hnf l8 1 0 "<lambda>[line:65];25;7"
.o 2 0
l8
	pop_a 1
.d 1 0
	jsr ea8
.o 0 1 r
	buildR_b 0
	pop_b 1
.d 1 0
	rtn
.o 1 0
ea8
	jsr_eval 0
	pushI_a 0
	pop_a 1
.o 0 1 i
s8
	pushI 0
	push_b 1
	ltI
	notB
	push_b 1
	push_b 1
	update_b 1 2
	update_b 0 1
	pop_b 1
	update_b 1 2
	updatepop_b 0 1
.d 0 2 bi
	jsr s10
.o 0 1 r
	pushR 4294967295.0
	push_b 1
	update_b 1 2
	update_b 0 1
	pop_b 1
	divR
.d 0 1 r
	rtn
.o 0 2 bi
s10
	eqB_b TRUE 0
	jmp_true case.1
	jmp case.2
case.1
	push_b 1
	updatepop_b 0 2
	ItoR
.d 0 1 r
	rtn
case.2
	push_b 1
	ItoR
	pushR 4294967296.0
	update_b 1 3
	updatepop_b 0 2
	addR
.d 0 1 r
	rtn
.export e_rand_sgenRandInt
.export e_rand_eagenRandInt
.descexp e_rand_dgenRandInt e_rand_ngenRandInt e_rand_lgenRandInt 1 0 "genRandInt"
.o 2 0
e_rand_lgenRandInt
	update_a 1 0
	create
	update_a 0 2
	pop_a 1
.d 2 0
	jmp e_rand_eagenRandInt
.n 1 e_rand_dgenRandInt e_rand_eagenRandInt
.o 1 0
e_rand_ngenRandInt
	push_node _cycle_in_spine 1
.o 2 0
e_rand_eagenRandInt
	jsr_eval 0
	pushI_a 0
	pop_a 1
.o 1 1 i
e_rand_sgenRandInt
.o 1 1 i
s2
	pushI 0
	pushI 624
	create_array INT 0 1
	push_b 0
	updatepop_b 0 1
.d 1 1 i
	jsr s3
.o 1 0
	push_a 0
	pushI 0
	updatepop_a 0 1
.d 1 1 i
	jsr s7
.o 1 0
	pushI 0
.d 2 1 i
	jmp s6
.o 2 1 i
s6
	pushI 624
	push_b 1
	eqI
	jmp_false else.3
	push_a 0
	pushI 0
	updatepop_b 0 1
	updatepop_a 0 1
.d 1 1 i
	jsr s7
.o 1 0
	pushI 0
.d 2 1 i
	jmp s6
else.3
	push_b 0
	push_a 0
	updatepop_a 0 1
	push_a 0
	select INT 0 1
	pushI 11
	pushI 1
	push_b 1
	subI
	pushI 2147483647
	shiftr%
	push_b 1
	push_b 3
	shiftr%
	and%
	push_b 2
	update_b 1 2
	updatepop_b 0 1
	xor%
	pushI 7
	push_b 1
	shiftl%
	pushI 2636928640
	push_b 1
	update_b 1 2
	update_b 0 1
	pop_b 1
	and%
	push_b 1
	update_b 1 2
	updatepop_b 0 1
	xor%
	pushI 15
	push_b 1
	shiftl%
	pushI 4022730752
	push_b 1
	update_b 1 2
	update_b 0 1
	pop_b 1
	and%
	push_b 1
	update_b 1 2
	updatepop_b 0 1
	xor%
	pushI 18
	pushI 1
	push_b 1
	subI
	pushI 2147483647
	shiftr%
	push_b 1
	push_b 3
	shiftr%
	and%
	push_b 2
	update_b 1 3
	updatepop_b 0 2
	xor%
	push_a 0
	buildh ARRAY 1
	push_b 2
	build_u _ 1 1 n13
	buildI_b 0
	fillh _Cons 2 3
	pop_a 1
	pop_b 3
.d 1 0
	rtn
.nu 1 1 _ _
.o 1 0
n13
	push_node_u _cycle_in_spine 1 1
.o 2 1 i
ea13
.o 2 1 i
s13
	push_a 0
	jsr_eval 0
	push_array 0
	updatepop_a 0 1
	pushI 1
	push_b 1
	addI
	updatepop_a 0 1
	updatepop_b 0 1
.d 2 1 i
	jmp s6
.o 1 1 i
s7
	pushI 624
	push_b 1
	eqI
	jmp_false else.4
	pop_b 1
.d 1 0
	rtn
else.4
	push_b 0
	push_a 0
	updatepop_a 0 1
	push_a 0
	select INT 0 1
	pushI 1
	push_b 2
	addI
	pushI 624
	push_b 1
	update_b 1 2
	update_b 0 1
	pop_b 1
	remI
	push_a 0
	updatepop_a 0 1
	push_a 0
	select INT 0 1
	push_b 2
.d 0 1 i
	jsr s5
.o 0 1 i
	push_a 0
	updatepop_a 0 1
	push_a 0
	select INT 0 1
	pushI 2147483647
	push_b 2
	and%
	pushI 2147483648
	push_b 4
	and%
	or%
	pushI 1
	pushI 1
	push_b 2
	and%
	pushI 2567483615
	push_b 1
	update_b 1 2
	update_b 0 1
	pop_b 1
	mulI
	pushI 1
	push_b 2
	subI
	pushI 2147483647
	shiftr%
	push_b 2
	push_b 4
	shiftr%
	and%
	push_b 4
	xor%
	update_b 1 6
	updatepop_b 0 5
	xor%
	push_b 0
	push_b 2
	push_a 0
	update_b 1 2
	updatepop_b 0 1
	updatepop_a 0 1
	update INT 0 1
	pushI 1
	push_b 1
	addI
	updatepop_b 0 1
.d 1 1 i
	jmp s7
.o 0 1 i
s5
	pushI 397
	pushI 624
	subI
	push_b 1
	ltI
	jmp_false else.5
	pushI 397
	push_b 1
	update_b 1 2
	updatepop_b 0 1
	addI
.d 0 1 i
	rtn
else.5
	pushI 397
	push_b 1
	addI
	pushI 624
	push_b 1
	update_b 1 2
	update_b 0 1
	pop_b 1
	update_b 1 2
	updatepop_b 0 1
	subI
.d 0 1 i
	rtn
.o 1 1 i
s3
	pushI 0
	push_b 1
	eqI
	jmp_false else.6
	buildAC "initrand: seed must not be 0\n"
	updatepop_a 0 1
	pop_b 1
.d 1 0
	jsr print_string_
.o 0 0
	halt
	push_array 0
	updatepop_a 0 1
.d 1 0
	rtn
else.6
	pushI 4294967295
	push_b 1
	and%
	pushI 0
	push_a 0
	update_b 1 2
	updatepop_b 0 1
	updatepop_a 0 1
	update INT 0 1
	pushI 0
.d 1 1 i
	jmp s9
.o 1 1 i
s9
	pushI 1
	push_b 1
	addI
	push_b 1
	push_a 0
	updatepop_a 0 1
	push_a 0
	select INT 0 1
	pushI 624
	push_b 2
	eqI
	jmp_false else.7
	pop_b 3
.d 1 0
	rtn
else.7
	push_b 0
	pushI 69069
	mulI
	pushI 4294967295
	push_b 1
	update_b 1 2
	update_b 0 1
	pop_b 1
	and%
	push_b 2
	push_a 0
	update_b 1 2
	updatepop_b 0 1
	updatepop_a 0 1
	update INT 0 1
	push_b 0
	updatepop_b 0 2
.d 1 1 i
	jmp s9
